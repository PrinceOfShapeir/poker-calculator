{"version":3,"sources":["logo.svg","components/HandCalculator.js","components/PokerView.js","App.js","reportWebVitals.js","index.js"],"names":["straightFinder","ray","array","map","val","thirteen","sort","a","b","containsZero","i","unshift","console","log","straight","length","highCard","newPairFinder","reverse","count","max","pairEvaluator","scores","filter","num","Math","kickerCalculator","bigTwo","secondPair","newLength","output","shift","resizer","kicker","pow","number","input","reduce","acc","handEvaluator","hand","slice","clubsHeartsSpadesDiamonds","push","payout","indexOf","straightFlush","splice","min","payload","flushFinder","thisarray","winsOrLoses","highCardKicker","table","concat","handName","value","determine","determiner","PokerView","props","builder","state","tableCards","Col","Card","onClick","flopCards","turnCards","riverCards","className","flop","turn","river","CardImg","src","debug","leftHand","revealLeft","handA","rightHand","revealRight","handB","handsPlayed","leftWins","localStorage","getItem","parseInt","rightWins","ties","deck","Array","fill","index","handAValue","handBValue","displayCards","dealt","orientationLocked","revealWinner","winCounted","chips","bets","pot","betMessage","checked","left","right","oldBets","betting","enableBetting","setState","betHands","check","leftOrRight","checkBets","doubleOrNothing","player","notPlayer","countWins","isNaN","setItem","divideChips","result","fold","lockOrientation","showDebug","revealAll","element","revealWinners","dealHand","times","cards","swap","floor","random","shuffleDeck","pop","style","backgroundColor","border","minHeight","height","fontFamily","screen","this","Button","Container","fluid","Row","xs","fontSize","toString","href","navigator","clipboard","writeText","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd4443c6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","/*\r\n * ()=>{\r\n\t\t\t\t\t\tfakeArray = array.filter((num)=>{return num != array[i]%13});\r\n\t\t\t\t\t\t\tlet secondPair = pairFinder(fakeArray);\r\n\t\t\t\t\t\t\tif(secondPair <2000) return false;\r\n\t\t\t\t\t\t\telse if(secondPair >= 2000 && secondPair <3000){\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\treturn 5000 + array[i]%13 + secondPair - 2000;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if(secondPair >array[i]%13+3000) return secondPair + array[i]%13 + 5000;\r\n\t\t\t\t\t\t\telse if(secondPair > 4000) return secondPair;\r\n\t\t\t\t\t\t\t}\r\n * \r\n * \r\n * \r\n * \r\n * \r\n * */\r\n\r\n\r\n\r\n\r\n\r\n\r\n//takes seven card input and returns hand strength\r\n//a stronger hand should always return a greater hand strength than a weaker hand\r\n\r\n//input format:\r\n\r\nexport {thirteen, handEvaluator};\r\n\r\nfunction flushFinder (input) {\r\n\tlet ray = input.slice();\r\n\tconsole.log(ray);\r\n\tlet clubsHeartsSpadesDiamonds = [[],[],[],[]];\r\n\tlet count = [0,0,0,0,];\r\n\tfor(let i = 0; i<ray.length;i++){\r\n\t\t\r\n\t\tif(ray[i]<=13){\r\n\t\t\t\r\n\t\t\tclubsHeartsSpadesDiamonds[0].push(ray[i]);\r\n\t\t\tcount[0]++;\r\n\t\t}\r\n\t\telse if (ray[i]>13&&ray[i]<=26){\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tclubsHeartsSpadesDiamonds[1].push(ray[i]);\r\n\t\t\tcount[1]++;\r\n\t\t}\r\n\t\telse if (ray[i]>26&&ray[i]<=39){\r\n\t\t\t\t\r\n\t\t\tclubsHeartsSpadesDiamonds[2].push(ray[i]);\r\n\t\t\tcount[2]++;\r\n\t\r\n\t\t}\r\n\t\telse if (ray[i]>39&&ray[i]<=52){\r\n\t\t\t\r\n\t\t\tclubsHeartsSpadesDiamonds[3].push(ray[i]);\r\n\t\t\tcount[3]++;\r\n\t\t\t\r\n\t\t}\r\n\t\telse console.log(\"couldn't catch  \" + ray[i]);\r\n\t}\r\n\t\r\n\tlet payout = count.indexOf(Math.max(...count));\r\n\t//console.log(count[0]);\r\n\t//console.log(Math.max(...count));\r\n\t//console.log(\"payout array:\" + clubsHeartsSpadesDiamonds[payout]);\r\n\tif(count[payout]>=5) { //there's a flush\r\n\t\r\n\t\t\tlet straightFlush = straightFinder(clubsHeartsSpadesDiamonds[payout]);//remember these are raw inputs\r\n\t\t\tif(straightFlush){\r\n\t\t\t\t\r\n\t\t\t\treturn straightFlush * 2; //should be +7000 since straight = 3500\r\n\t\t\t\t//aces are still low in a straight flush, so regular straightFinder should work\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t\r\n\t\t\t\twhile(clubsHeartsSpadesDiamonds[payout].length>5){\r\n\t\t\t\t\t\r\n\t\t\t\t\tclubsHeartsSpadesDiamonds[payout].splice(clubsHeartsSpadesDiamonds[payout].indexOf(Math.min(clubsHeartsSpadesDiamonds[payout])), 1);\r\n\t\t\t\t}\r\n\t\t\t\treturn 4000 + (()=>{\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet payload = 0;\r\n\t\t\t\t\tfor(let i in clubsHeartsSpadesDiamonds[payout]){\r\n\t\t\t\t\t\tpayload += kickerCalculator(clubsHeartsSpadesDiamonds[payout][i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn payload;\r\n\t\t\t\t\t\r\n\t\t\t\t\t})()\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\r\n\t}\r\n\telse return false;\r\n}\r\nfunction straightFinder(ray) {\r\n\r\n\tlet array = [...ray].map(val=>thirteen(val)).sort((a,b)=>a-b);\r\n\tlet containsZero = false;\r\n\tfor(let i in array){\r\n\t\tif(array[i] === 13) {\r\n\t\t\tcontainsZero = true;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t} \r\n\tif(containsZero) array.unshift(0);\r\n\tconsole.log(array);\r\n\tlet straight = [array[0]];\r\n\r\n\tfor(let i in array){\r\n\r\n\t\t//if it is not a duplicate\r\n\t\tif(array[i]!==straight[straight.length-1]) {\r\n\t\t\t//if it comes after the last\r\n\t\t\tif(array[i]===straight[straight.length-1]+1){\r\n\t\t\t\tstraight[straight.length] = array[i];\r\n\t\t\t}\r\n\t\t\telse if(array.length-i+1<5) break; //not enough remain\r\n\t\t\telse if(straight.length<5) straight = [array[i]];//reset the straight\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tconsole.log(straight);\r\n\r\n\treturn (straight.length>=5) ? 3500 + highCard(straight) : false;\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n//returns the highest possible straight from given array\r\nfunction oldStraightFinder(ray) {\r\n\t\r\n\tlet array = [...ray];\r\n\t//populate array with normalized input\r\n\tfor(let i = 0; i<array.length; i++){\r\n\r\n\t\t\r\n\t\tarray[i] = thirteen(array[i]);\r\n\r\n\t\tif(array[i]==13){array[array.length] = 0;}//ace is both low and high\r\n\t\t\r\n\t\t\r\n\t}\r\n//console.log(\"debug: array =\" + array);\r\n\t\r\n\tlet highestToLowest = [];\r\n//console.log(\"debug: mathmax array = \" + array.splice(array.indexOf(Math.max(...array)),1));\r\n\t\r\n\thighestToLowest.push(array.splice(array.indexOf(Math.max(...array)),1));\r\n//console.log(highestToLowest[0]);\r\n\twhile(array.length>0&&highestToLowest.length<5){\r\n\t\t\r\n\t\thighestToLowest.push(array.splice(array.indexOf(Math.max(...array)),1));\r\n\r\n\t\t//console.log(highestToLowest[1]);\r\n\t\t\r\n\t\t\r\n\t\tif(highestToLowest[highestToLowest.length-1] != (highestToLowest[highestToLowest.length - 2] -1)){\r\n//console.log(\"debug true\" + Number(highestToLowest[highestToLowest.length-1] + 1 ) + \"\" + highestToLowest[highestToLowest.length - 2]);\r\n\t\t\t\r\n\t\t\tif(highestToLowest[highestToLowest.length-1] == highestToLowest[highestToLowest.length - 2]){ //it's because of a repeat\r\n\t\t\t\t\r\n\t\t\t\thighestToLowest.pop();//deletes repeats instead of resetting array\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\telse { \r\n\t\t\t\t\r\n\r\n\r\n\t\t\t\t\thighestToLowest = [highestToLowest[highestToLowest.length-1]];//reset array\r\n\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\t\t\r\n\t\t\r\n\t}\r\n//console.log(\"debug: highestToLowest = \" + highestToLowest);\r\n\tif(highestToLowest.length==5){\r\n//console.log(\"true\");\r\n\t\t\r\n\t\t//return highestToLowest.reduce(((total,value)=>{total += kickerCalculator(value)}),0) + 3500; //gives nan for some reason\r\n\t\tlet weightedPayload = 0;\r\n\tfor (let i = 0; i<highestToLowest.length; i++){\r\n\t\tweightedPayload += kickerCalculator(highestToLowest[i]);\r\n}\r\n\treturn weightedPayload + 3500;\r\n\r\n\t}\r\n\telse return false;\r\n\t\t\r\n\t\t\r\n\t\r\n\t\r\n\t\r\n\r\n\t\r\n\t\r\n\t\r\n}\r\n//1. check for royal flush\r\n//2. check for flush\r\n//3. check for straight\r\n// returns Ms + top card % 13\r\n\r\n//4. check for pair/trip/quads\r\n\r\n//returns Mp,Mt,Mq + top 3, 2, 1\r\n\r\n//pairfinder\r\n\r\nfunction newPairFinder (ray) {\r\n\r\n\tlet array = ray.map(val => thirteen(val)).sort().reverse();\r\n\tlet count = 0;\r\n\tlet max = 0;\r\n\tfor(let i = 0; i<array.length; i++){\r\n\r\n\t\tif(i<array.length) {\r\n\r\n\t\t\tif(array[i]===array[i+1]){\r\n\t\t\t\tcount++;\r\n\t\t\t\tmax = array[i];\r\n\t\t\t} else if (count>0) {\r\n\t\t\t\ti = array.length;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\tconsole.log(count);\r\n\r\n\r\n\tswitch(count) {\r\n\r\n\t\tcase 1: \r\n\t\t\treturn max + 2000;\r\n\t\tcase 2: \r\n\t\t\treturn max + 3000;\r\n\t\tcase 3: \r\n\t\t\treturn max + 6000;\r\n\t\tdefault:\r\n\t\t\treturn false;\r\n\r\n\t}\r\n\r\n\tconsole.log(array + \"is false??\");\r\n\r\n\treturn false;\r\n\r\n\r\n\t\r\n/*\r\n\tfor(let i = array.length-1; i>0; i--){\r\n\t\tif(array[i]===array[i-1]){\r\n\t\t\tcount++;\r\n\r\n\t\t} else if(count>0){\r\n\r\n\t\t\tswitch(count) {\r\n\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\treturn array[i]+2000;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\treturn array[i]+3000;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\treturn array[i]+6000;\r\n\t\t\t\tdefault: return false;\r\n\t\t\t}\r\n\r\n\t\t} else console.log(array[i] + \" != \" + array[i-1])\r\n\t\t\r\n\t}*/\r\n\r\n\t\r\n\t//pairevaluator is expecting an unordered list of pairs\r\n\t//we can just greedily return the first found pair\r\n\r\n\r\n}\r\n/*\r\nfunction pairFinder (ray) {\r\n\t\r\n\tlet array = [...ray]; //we mutate this\r\n\t\r\n\tfor (let i = 0; i<array.length;i++){\r\n\t\t\r\n\t\tfor(let j = i +1; j<array.length; j++){\r\n\t\t\t\r\n\t\t\tif(thirteen(array[i]) == thirteen(array[j])){\r\n\t\t\t\t\r\n\t\t\t\treturn ((()=>{\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(j; j<array.length; j++){\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(thirteen(array[i])==thirteen(array[j])){\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\treturn ((()=>{for(j;j<array.length;j++){if(thirteen(array[i])==thirteen(array[j])){\r\n\t\t\t\t\t\t\t\t//only higher quads beat\r\n\t\t\t\t\t\t\t\treturn thirteen(array[i]) + 6000 //kickerCalculator(Math.max(array.filter((num)=>{thirteen(num)!=thirteen(array[i])})));//quads\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t} return false;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t})() || thirteen(array[i]) + 3000) //trips\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn false;//no trips\r\n\t\t\t\t\t\r\n\t\t\t\t\t})() || thirteen(array[i]) + 2000)//will either return the number of the pair or false\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n}*/\r\n\r\n//second step is to filter the remaining cards, then run pairFinder on them again, until no cards remain or it returns less than a pair.\r\n\r\nfunction pairEvaluator (ray) {\r\n\t\r\n\tlet scores = [];\r\n\tlet array = [...ray];\r\n\t\r\n\t\r\n\tscores[0] = newPairFinder(array) || 0;\r\n\t\r\n\tif(scores[0]>0){ //pairfinder returned a pair\r\n\t\t\t//console.log(array);\r\n\t\tarray = array.filter(num=>thirteen(num)!=scores[0]%1000);\r\n\t\t\t//console.log(array);\r\n\t\t\tscores[1] = newPairFinder(array) || 0;\r\n\r\n\t\t\tif(scores[1]>0){\r\n\t\t\t\t\tarray = array.filter(num=>thirteen(num)!=scores[1]%1000);\r\n\t\t\t\t\tscores[2] = newPairFinder(array) || 0;\r\n\t\t\t}//there's only 3 possible pairs in any set of 7 cards, 2 = 3\r\n\t}\r\n\telse return false;\r\n\t\r\n\tlet max = Math.max(...scores);\r\n\t\r\n\tif(max>6000) {\r\n\t\tconsole.log(\"over 6k\");\r\n\t\treturn max - max%1000 + kickerCalculator((max%1000)+13) + kickerCalculator(Math.max(...ray.filter(val=>thirteen(val!=thirteen(max%1000))).map(val=>thirteen(val))));//probably quads\r\n\t\t//return max - max%1000 + kickerCalculator((max%1000)+13) + kickerCalculator(Math.max(array.filter((num)=>{return thirteen(num)!=thirteen(max%6000)})));\r\n\t}\r\n\telse if(max>3000){\r\n\t\t\r\n\t\tconsole.log(scores);\r\n\t\tscores = scores.filter(num=>num!=max);\r\n\t\treturn ((Math.max(...scores)>0) ? \r\n\t\t\t\r\n\t\t\tmax - max%1000 + kickerCalculator((max%1000)+13) * 3 \r\n\t\t\t+ Math.max(...scores) - Math.max(...scores)%1000 + kickerCalculator((Math.max(...scores)%1000)+13) * 2\r\n\t\t\t+ ((Math.max(...scores)>=3000) ? -1000 : 0)\r\n\t\t\t: max - max%1000 + kickerCalculator((max%1000)+13)+ (()=>{\r\n\t\t\t\tarray = [...ray].filter((num)=>{return thirteen(num)!=max%1000}).map(val=>thirteen(val));\r\n\t\t\t\tlet bigTwo = 0;\r\n\t\t\t\tfor(let i = 0; i<2; i++){\r\n\t\t\t\t\tbigTwo += kickerCalculator(Math.max(...array));\r\n\t\t\t\t\tarray = array.filter(val=>val!=Math.max(...array));\r\n\t\t\t\t}\r\n\t\t\t\treturn bigTwo;\r\n\t\t\t})())//creates a + 5000 hand with highest pair or adds the top 2 kickers\r\n\t\t\r\n\t}\r\n\telse if(max>2000){\r\n\t\tscores = scores.filter((num)=>{return num!=max});\t\r\n\t\tlet secondPair = Math.max(...scores) | 0;\r\n\t\treturn ((secondPair>0) ? \r\n\r\n\r\n\t\t\tmax - max%1000 + secondPair - secondPair%1000 - 1500 +\r\n\t\t\t(kickerCalculator(max%1000)) * 49*28 +\r\n\t\t\t(kickerCalculator(secondPair%1000)) *49*21 +\r\n\t\t\t\r\n\t\t\tkickerCalculator(\r\n\t\t\t\tMath.max(\r\n\t\t\t\t\t...[...ray].map(val=>thirteen(val)).filter(val=>val!=max%1000&&val!=secondPair%1000)\r\n\t\t\t\t\t)\r\n\t\t\t\t)\r\n\t\t\t\r\n\r\n\t\t/*\r\n\t\tmax - max%1000 + kickerCalculator((max%1000)+13) * 2 + kickerCalculator((Math.max(...scores)%1000)+13) * 2  + Math.max(...scores) - 1500 - Math.max(...scores)%1000\r\n\t\t+ kickerCalculator(Math.max(\r\n\t\t\t...ray.map(val=>thirteen(val)).filter(val=>val!=max%1000 && val!=Math.max(...scores)%1000)\r\n\t\t\t\r\n\t\t\t//.filter(val=>val!=max%1000 && val!=Math.max(...scores)%1000)\r\n\t\t))*/\r\n\t\t: max - max%1000 + max%1000*7 +  highCard([max%1000, max%1000, ...resizer([...ray].map(val=>thirteen(val)).filter(val=>val!=max%1000), 3)])//fix this now\r\n\t\t\t\r\n\t\t\r\n\t\t)//2p evaluates to 2500 + remainder or + 3 kickers\r\n\t\r\n\t}\r\n\t\r\n\telse {\r\n\t\tconsole.log(\"error no pair but still got here\");\r\n\t\treturn false}\r\n\t\r\n\t\r\n}\r\n//needs a raw kicker\r\nfunction kickerCalculator (kicker) {\r\n//for math reasons, powers of 7 are enough to ensure top kicker wins over summed lower cards\r\n\treturn ((thirteen(kicker))*Math.pow(7,thirteen(kicker)/3))/3000000;\r\n\t\r\n\t\r\n\t\r\n\t}\r\n\t//fixes 13%13 = 0 problem\r\nfunction thirteen (number) {\r\n\tif (number == 0) return 0;\r\n\r\n\tif (number % 13 == 0 ) return 13;\r\n\telse return number%13;\r\n\t\r\n\t}\r\n\r\n\r\n\r\n\r\n\r\n//5. return sum of top 5 cards\r\n\r\n//this simple method loops twice to remove two lowest cards and returns the sum of the remaining card values\r\n\r\n\r\nfunction highCard (input){\r\n\r\n\t//posible future change: \r\n\t// * add new default param, len = 5\r\n\t\r\n\t\r\n\r\n{\r\n/*\r\nfor(let i = array.length-1; i>0; i--){\r\n\r\n\r\nif(array[i]<array[i-1]){\r\n\r\n[array[i]][array[i-1]] = [array[i-1]][array[i]];\r\n}\r\n\r\n}\r\n\r\narray.shift(); //removes the lowest*/\r\n/*\r\nwhile(array.length>5){\r\n\tlet minIndex = array.indexOf(Math.min(...array));\r\n\t\r\n\tif(array[0]!=array[minIndex]){\r\n\t\t//swap\r\n\t\t[array[0]][array[minIndex]] = [array[minIndex]][array[0]];\r\n\t}\r\n\telse array.shift();\r\n\t\r\n\t\r\n}*/ \r\n\r\n}\r\n\tlet array = [...input].map(val=>thirteen(val)).sort((a,b)=>a-b);\r\n\twhile(array.length>5){\r\n\t\tarray.shift();\r\n\t}\r\n\r\n\treturn array.reduce((acc, val)=>acc+kickerCalculator(val));\r\n}\r\n\r\n\r\n//scope for j\r\n\t/*{let j = 0;\r\n\t\tlet summer = (array) => {\r\n\r\n\t\t\tfor(let i = 0; i<array.length;i++){\r\n\t\t\t\r\n\t\t\t\tj += kickerCalculator(array[i]); \r\n\t\t\t}\r\n\t\t\treturn j;\r\n\t\t}\r\n\t\t\treturn summer(array);\r\n\r\n\t\t}\r\n\t}*/\r\n\r\n//all the work we did above lets us easily compare by hand value\r\n//every function always returns the highest possible hand by that method\r\nfunction handEvaluator (array){\r\n\t\r\n\tlet hand = [];\r\n\thand[hand.length] = flushFinder(array)||0;\r\n\thand[hand.length] = straightFinder(array)||0;\r\n\thand[hand.length] = pairEvaluator(array)||0;\r\n\thand[hand.length] = highCard(array)||0;\r\n\t//console.log(array);\r\n\t//console.log(Math.max(...hand));\r\n\treturn Math.max(...hand);\r\n\t\r\n\t\r\n}\r\n\r\nfunction resizer (array, newLength) {\r\n\tlet output = [...array].sort((a,b)=>a-b);\r\n\r\n\twhile(output.length>newLength){\r\n\t\toutput.shift();\r\n\t}\r\n\r\n\treturn output;\r\n}\r\n\r\n/*\r\nfunction fiveLowest (array) {\r\n\tlet temp = [...array];\r\n\twhile(temp.length>5){\r\n\t\ttemp.shift();\r\n\t}\r\n\treturn temp;\r\n}*/\r\n\r\n//console.log(\"Kicker finds: \" + kickerCalculator(6));\r\nconst thisarray = [17,22,43,35,23,30,34];//console.log(\"Highcard = \" + highCard(thisarray));\r\n//second hand\r\nconsole.log(\"handevaluator: \" + handEvaluator(thisarray));\r\n//console.log(straightFinder(thisarray));\r\n//console.log(newStraightFinder(thisarray));\r\n//console.log(\"highCard \" + highCard(thisarray));\r\nconsole.log(\"handevaluator: \" + handEvaluator([1,24,43,35,23,30,34])); //no longer throwing errors\r\n//console.log(straightFinder([9,42,35,11,3,33,21]));\r\nconsole.log(\"pairevaluator: \" + pairEvaluator(thisarray));\r\n//console.log(\"pairevaluator: \" + pairEvaluator([45,37,42,7,12,51,3]));\r\n//console.log(\"highCard \" + highCard([21,45,36,38,29,18,26]));\t\r\n\r\nconsole.log(\"winner is \" + (handEvaluator(thisarray)>handEvaluator([1,24,43,35,23,30,34])));\r\n\r\n//console.log(kickerCalculator(7));\r\n//console.log(kickerCalculator(37));\r\n//console.log((kickerCalculator(13)+kickerCalculator(5))-(kickerCalculator(13)+kickerCalculator(3)));\r\n//console.log(\"raw kickers yield: \")\r\n//console.log(thisarray.map(val=>thirteen(val)).sort());\r\n//console.log(fiveLowest(thisarray.map(val=>thirteen(val)).sort()).reduce((acc,val)=>acc+kickerCalculator(val)));\r\n//console.log(fiveLowest(thisarray.map(val=>thirteen(val)).sort()).map(val=>`${val} : ${kickerCalculator(val)}`));\r\n//console.log([37,3,23,48,46,52,13].map(val=>thirteen(val)).sort());\r\n//console.log(fiveLowest([37,3,23,48,46,52,13].map(val=>thirteen(val)).sort()).reduce((acc,val)=>acc+kickerCalculator(val)));\r\n//console.log(fiveLowest([37,3,23,48,46,52,13].map(val=>thirteen(val)).sort()).map(val=>`${val} : ${kickerCalculator(val)}`));\r\n//console.log(kickerCalculator(thisarray)); //this needs a single int input...\r\n\r\n//console.log(pairFinder(thisarray));\r\n//console.log(pairEvaluator(thisarray));\r\n//console.log(\"newpairfainder\" + newPairFinder(thisarray));\r\n//console.log(\"newpairfainder\" + newPairFinder([40,27,35,1]));\r\n//console.log([40,27,35,1].map(a=>thirteen(a)));\r\n//console.log(\"newpairfainder\" + newPairFinder([40,27,35,1].map(a=>thirteen(a))));\r\n//console.log(flushFinder(thisarray));//basically works\r\n//console.log(straightFinder(thisarray)); //fixed\r\n\r\n","//import handEvaluator from './HandCalculator';\r\nimport { findAllByDisplayValue } from '@testing-library/dom';\r\nimport React, {Component} from 'react';\r\nimport {UncontrolledTooltip, Button, Card, CardImg, Figure, Container, Row, Col} from 'reactstrap';\r\nimport {handEvaluator, thirteen} from './HandCalculator';\r\n\r\nfunction fillDeck () {\r\n\r\n    return new Array(52).fill(0).map((value, index) => index+1);\r\n\r\n}\r\n\r\nfunction winsOrLoses (a,b) {\r\n\r\n    if(a===b) return \"Tied\"\r\n    else return (a>b) ? \"Wins\" : \"Loses\";\r\n\r\n}\r\n\r\nfunction highCardKicker (hand, table) {\r\n\r\n    let value = Math.max(...hand.concat(table).map(val=>thirteen(val)));\r\n\r\n\r\n    switch(value) {\r\n\r\n        case 13:\r\n            return \"an Ace \"\r\n        case 12:\r\n            return \"a King \"\r\n        case 11:\r\n            return \"a Queen \"\r\n        case 10:\r\n            return \"a Jack \"\r\n        case 9:\r\n            return \"a Ten \"\r\n        case 8:\r\n            return \"a Nine \"\r\n        case 7:\r\n            return \"an Eight \"\r\n        case 6:\r\n            return \"a Seven \"\r\n        case 5:\r\n            return \"a Six \"\r\n        case 4:\r\n            return \"a Five \"\r\n        case 3:\r\n            return \"a Four \"\r\n        case 2:\r\n            return \"a Three \"\r\n        case 1:\r\n            return \"a Two \"\r\n        default:\r\n            return \"nothing \"\r\n        \r\n    }\r\n\r\n}\r\n\r\n\r\nfunction handName (value, hand, table, determine=false) {\r\n    const determiner = () => (determine) ? \"a \" : \"\";\r\n\r\n    if(value>=7000) return determiner() + \"Straight Flush\";\r\n    else if (value>=6000) return \"Four of a Kind\";\r\n    else if (value>=5000) return determiner() + \"Full House\";\r\n    else if (value>=4000) return determiner() + \"Flush\";\r\n    else if (value>=3500) return determiner() + \"Straight\";\r\n    else if (value>=3000) return \"Three of a Kind\";\r\n    else if (value>=2500) return \"Two Pair\";\r\n    else if (value>=2000) return determiner() + \"Pair\";\r\n    else return highCardKicker(hand, table) + \"High Card\";\r\n}\r\n\r\nfunction shuffleDeck (times, cards) {\r\n    let deck = [...cards]\r\n    for(let i = 0; i<times; i++){\r\n\r\n        for(let i in deck){\r\n\r\n            let swap = Math.floor(Math.random() * Math.floor(52));\r\n            \r\n            [deck[i],deck[swap]] = [deck[swap], deck[i]];\r\n        }\r\n\r\n    }\r\n\r\n    return deck;\r\n\r\n}\r\n\r\n\r\n\r\nexport default class PokerView extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n\r\n            //53 is the face down image\r\n            tableCards: [53,53,53,53,53],\r\n            handA: [53,53],\r\n            handB: [53,53],\r\n            handsPlayed: 0,\r\n            leftWins: (localStorage.getItem(\"leftWins\")) ? parseInt(localStorage.getItem(\"leftWins\")) : 0,\r\n            rightWins: (localStorage.getItem(\"rightWins\")) ? parseInt(localStorage.getItem('rightWins')) : 0,\r\n            ties: (localStorage.getItem(\"ties\")) ? parseInt(localStorage.getItem('ties')) : 0,\r\n            deck: fillDeck(),\r\n            debug: false,\r\n            handAValue: 0,\r\n            handBValue: 0,\r\n            flop: false,\r\n            turn: false,\r\n            river: false,\r\n            displayCards: false, \r\n            dealt: false,\r\n            revealRight: false,\r\n            revealLeft: false,\r\n            orientationLocked : false,\r\n            revealWinner: false,\r\n            winCounted: false,\r\n            chips: [500,500],\r\n            bets: [0,0],\r\n            pot: 0,\r\n            betMessage: null,\r\n            checked: {left: false, right: false},\r\n            oldBets: [0,0],\r\n            betting: false\r\n\r\n        }\r\n\r\n        this.enableBetting = () => {\r\n            this.setState({betting: !this.state.betting})    \r\n        }\r\n\r\n        this.betHands = (hand, chips) => {\r\n\r\n            if(this.state.checked.right&&this.state.checked.left) this.setState({checked: {right: false, left: false}})\r\n\r\n            if(hand===0){\r\n\r\n                if(this.state.chips[hand]>=chips) {\r\n                    return this.setState({\r\n                        chips: [this.state.chips[hand]-chips, this.state.chips[1]],\r\n                        bets: [this.state.bets[hand]+chips, this.state.bets[1]]\r\n                    })\r\n                }\r\n\r\n            } else {\r\n\r\n                \r\n                if(this.state.chips[hand]>=chips) {\r\n                    return this.setState({\r\n                        chips: [this.state.chips[0], this.state.chips[hand]-chips],\r\n                        bets: [this.state.bets[0], this.state.bets[hand]+chips]\r\n                    })\r\n                }\r\n\r\n\r\n            }\r\n\r\n            \r\n\r\n        }\r\n        this.check = (leftOrRight) => {\r\n            this.setState({checked: {...this.state.checked, [leftOrRight]: !this.state.checked[leftOrRight]}});\r\n            //if(this.state.checked.left&&this.state.checked.right) return this.setState({betMessage: \"Pot is good.\"})\r\n        }\r\n        this.checkBets = () => {\r\n\r\n            if(this.state.bets[0]!==this.state.bets[1]) {\r\n\r\n                if(this.state.bets[0]>this.state.bets[1]) {\r\n                    if(this.state.chips[1]===0) {\r\n                        if(this.state.betMessage) this.setState({betMessage: null});\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        this.setState({betMessage: `Right needs to bet ${this.state.bets[0]-this.state.bets[1]} more.`})\r\n                        return false;\r\n                    }\r\n                } else if(this.state.bets[1]>this.state.bets[0]){\r\n                    if(this.state.chips[0]===0) {\r\n                        if(this.state.betMessage) this.setState({betMessage: null});\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        this.setState({betMessage: `Left needs to bet ${this.state.bets[1]-this.state.bets[0]} more.`})\r\n                        return false; \r\n                    }\r\n                } else return true;\r\n\r\n            } else {\r\n                 if(this.state.betMessage) this.setState({betMessage: null});\r\n                 if(this.state.bets[0]+this.state.bets[1]===0) {\r\n                     if((this.state.checked.right&&this.state.checked.left)||!this.state.betting||(this.state.chips[0]<1||this.state.chips[1]<1)) {\r\n                         return true;\r\n                     } else {\r\n                         this.setState({betMessage: \"All players need to check to continue.\"});\r\n                         return false;\r\n                     }\r\n                 }\r\n                 return true;\r\n            }\r\n\r\n        }\r\n\r\n        this.doubleOrNothing = (player) => {\r\n            let notPlayer = (player) ? 0 : 1;\r\n            let bets = this.state.bets;\r\n            if(bets[notPlayer]>bets[player]){\r\n                return (bets[notPlayer]-bets[player])*2\r\n            } else return 0;\r\n        }\r\n\r\n        this.countWins = () => {\r\n\r\n            if(this.state.dealt&&this.state.river&&!this.state.winCounted) {\r\n\r\n                if(!isNaN(this.state.handAValue)&&!isNaN(this.state.handBValue)) {\r\n\r\n                    let a = (this.state.handAValue>=this.state.handBValue) ? (this.state.handAValue>this.state.handBValue) ?  1 : 0 \r\n                    : -1;\r\n                    let b = (this.state.handBValue>=this.state.handAValue) ? (this.state.handBValue>this.state.handAValue) ?  1 : 0 \r\n                    : -1;\r\n                    this.setState({winCounted: true})\r\n\r\n                    if(a>0) return localStorage.setItem(\"leftWins\", this.state.leftWins + a), this.setState({leftWins: this.state.leftWins + a}), this.divideChips(0);\r\n                    else if(b>0) return localStorage.setItem(\"rightWins\", this.state.rightWins + b), this.setState({rightWins: this.state.rightWins + b}), this.divideChips(1);\r\n                    else if(a===b===0) return localStorage.setItem(\"ties\", this.state.ties + 1), this.setState({ties: this.state.ties + 1}), this.divideChips(-1);\r\n\r\n\r\n                } else console.log(\"Error, non numeric hand value\");\r\n\r\n\r\n            }\r\n            \r\n        }\r\n\r\n        this.divideChips = (result) => {\r\n\r\n                if(result>=1) return this.setState({\r\n                    chips: [this.state.chips[0], this.state.chips[1]+this.state.bets.reduce((a,b)=>a+b)+this.state.pot],\r\n                    bets: [0,0],\r\n                    oldBets: [0,0],\r\n                    pot: 0\r\n                }); \r\n                else if(result===0) return this.setState({\r\n                    chips: [this.state.chips[0]+this.state.bets.reduce((a,b)=>a+b) +this.state.pot, this.state.chips[1]],\r\n                    bets: [0,0],\r\n                    oldBets: [0,0],\r\n                    pot: 0\r\n                }); else return this.setState({\r\n                    chips: [this.state.chips[0]+this.state.bets[0]+this.state.oldBets[0], this.state.chips[1] + this.state.bets[1] + this.state.oldBets[1]],\r\n                    bets: [0,0],\r\n                    oldBets: [0,0],\r\n                    pot: 0\r\n                })\r\n\r\n\r\n        }\r\n\r\n        this.fold = (player) => {\r\n\r\n            return this.divideChips(player ? 0 : 1);\r\n\r\n        }\r\n\r\n        this.lockOrientation = () => {\r\n            this.setState({\r\n                orientationLocked: true\r\n            })\r\n        }\r\n\r\n        this.showDebug = () => {\r\n            this.setState({\r\n                debug: !this.state.debug\r\n            })\r\n        }\r\n        this.revealAll = () => {\r\n            this.setState({\r\n                revealLeft: true,\r\n                revealRight: true,\r\n                flop: true,\r\n                turn: true,\r\n                river: true\r\n            })\r\n        }\r\n\r\n        this.revealLeft = () => {\r\n            this.setState({\r\n                revealLeft: !this.state.revealLeft\r\n            })\r\n        }\r\n        this.revealRight = () => {\r\n            this.setState({\r\n                revealRight: !this.state.revealRight\r\n            })\r\n        }\r\n        this.flopCards = () =>{\r\n            if(this.checkBets()) this.setState({\r\n                flop: !this.state.flop,\r\n                checked: {left:  false, right: false},\r\n                pot: this.state.bets.reduce((a,b)=>a+b) + this.state.pot,\r\n                bets: [0,0],\r\n                oldBets: this.state.oldBets.map((element, index)=>{element+this.state.bets[index]})\r\n            })\r\n        }\r\n        this.turnCards = () =>{\r\n            if(this.checkBets()) this.setState({\r\n                turn: !this.state.turn,\r\n                checked: {left:  false, right: false},\r\n                pot: this.state.bets.reduce((a,b)=>a+b) + this.state.pot,\r\n                bets: [0,0],\r\n                oldBets: this.state.oldBets.map((element, index)=>{element+this.state.bets[index]})\r\n            })\r\n        }\r\n        this.riverCards = () =>{\r\n            if(this.checkBets()) this.setState({\r\n                river: !this.state.river,\r\n                checked: {left:  false, right: false},\r\n                pot: this.state.bets.reduce((a,b)=>a+b) + this.state.pot,\r\n                bets: [0,0],\r\n                oldBets: this.state.oldBets.map((element, index)=>{element+this.state.bets[index]})\r\n            })\r\n        }\r\n        this.revealWinners = () => {\r\n            if(this.checkBets()){\r\n                this.countWins();\r\n                return this.setState({\r\n                revealWinner: !this.state.revealWinner\r\n            });\r\n            }\r\n\r\n        }\r\n\r\n        this.dealHand = () => {\r\n            if(!this.checkBets()&&this.state.dealt) return null;\r\n            this.countWins();\r\n\r\n            let [a,b,table, deck] = [[],[],[], this.state.deck];\r\n\r\n            deck = shuffleDeck(5,deck);\r\n\r\n            //deal to players\r\n            a.push(deck.pop());\r\n            b.push(deck.pop());\r\n            a.push(deck.pop());\r\n            b.push(deck.pop());\r\n            //burn 1\r\n            deck.pop();\r\n            //flop\r\n            table.push(deck.pop());\r\n            table.push(deck.pop());\r\n            table.push(deck.pop());\r\n            //burn 2\r\n            deck.pop();\r\n            //turn card\r\n            table.push(deck.pop());\r\n            //burn 3\r\n            deck.pop();\r\n            //river\r\n            table.push(deck.pop());\r\n            \r\n            console.log([...a, ...table]);\r\n            this.setState({\r\n                //deck: [...deck],\r\n                handA: [...a],\r\n                handB: [...b],\r\n                tableCards: [...table],\r\n                handAValue: handEvaluator([...a, ...table]),\r\n                handBValue: handEvaluator([...b, ...table]),\r\n                dealt: true,\r\n                flop: false,\r\n                river: false,\r\n                turn: false, \r\n                revealRight: false,\r\n                revealLeft: false,\r\n                revealWinner: false,\r\n                winCounted: false,\r\n                checked: {left:  false, right: false},\r\n                betMessage: null\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    table = () => {\r\n\r\n        let builder = [];\r\n\r\n        for(let i in this.state.tableCards){\r\n\r\n            builder.push(\r\n\r\n                <>\r\n                    \r\n                            <Col><Card onClick={(i<=2) ? this.flopCards : ((i<=3) ? this.turnCards : this.riverCards)}\r\n                            className={(this.state.flop&&i<=2) ? \"flipCard\" : ((this.state.turn&&i<=3) ? \"flipCard\" : ((this.state.river&&i<=4) ? \"flipCard\" : \"\"))}\r\n                            \r\n                            >\r\n                                <CardImg \r\n\r\n                                \r\n                                \r\n                                src={((i<=2&&this.state.flop)||(i<=3&&this.state.turn)||(i<=4&&this.state.river)) ? `./images/${this.state.tableCards[i]}.svg` : `./images/53.svg`} />\r\n                            </Card><p>{(this.state.debug) ? this.state.tableCards[i] +\r\n                                \" (\" + (thirteen(this.state.tableCards[i])+1) + \")\": \"\"}</p></Col>\r\n                \r\n                </>\r\n                \r\n                    \r\n\r\n            )\r\n        }\r\n\r\n        return (\r\n            <>\r\n                    {builder}\r\n                   \r\n                        \r\n\r\n            </>\r\n\r\n        )\r\n\r\n    }\r\n    \r\n    leftHand = () => {\r\n\r\n        return (\r\n            <>\r\n           \r\n            <Card onClick={this.revealLeft}\r\n                className={(this.state.revealLeft) ? \"flipCard\" : \"\" }\r\n            >\r\n                <CardImg src={(this.state.revealLeft) ? `./images/${this.state.handA[0]}.svg` : './images/53.svg'} />\r\n            </Card>\r\n            <Card onClick={this.revealLeft}\r\n                className={(this.state.revealLeft) ? \"flipCard\" : \"\" }\r\n                >\r\n                <CardImg src={(this.state.revealLeft) ? `./images/${this.state.handA[1]}.svg` : './images/53.svg'} />\r\n            </Card>\r\n            \r\n            </>\r\n\r\n        )\r\n\r\n    }\r\n\r\n    rightHand = () => {\r\n\r\n        return (\r\n            <>\r\n\r\n            \r\n            <Card onClick={this.revealRight}\r\n                className={(this.state.revealRight) ? \"flipCard\" : \"\" }\r\n            >\r\n                <CardImg src={(this.state.revealRight) ? `./images/${this.state.handB[0]}.svg` : './images/53.svg' } />\r\n            </Card>\r\n            <Card onClick={this.revealRight}\r\n                className={(this.state.revealRight) ? \"flipCard\" : \"\" }\r\n                >\r\n                <CardImg src={(this.state.revealRight) ? `./images/${this.state.handB[1]}.svg` : './images/53.svg'} />\r\n            </Card>\r\n            \r\n            </>\r\n\r\n        )\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n            return (\r\n                <div className=\"text-center\" style={{\r\n                    backgroundColor: \"#4caf50\",\r\n                    border: \"thick solid #A0522D\",\r\n                    minHeight: \"100vh\",\r\n                    height: '100%',\r\n                    fontFamily: \"Jazz LET\"\r\n                }}>\r\n                    {(() => {if (!this.state.orientationLocked){\r\n                        screen.lockOrientation('landscape');\r\n                        this.lockOrientation();\r\n                    }})}\r\n                    <h1>Compare Two Poker Hands</h1>\r\n\r\n                    <h4>{((this.state.checked.right&&this.state.checked.left&&(this.state.bets[0]===this.state.bets[1]))||(this.state.bets[0]===this.state.bets[1]&&this.state.bets[0]+this.state.bets[1]>0))&&this.state.dealt ? \"Pot is good\": ((this.state.betMessage) ? this.state.betMessage : \"Deal two poker hands and then guess which one is the winner.\") }</h4>\r\n\r\n                    <Button onClick={this.dealHand}>\r\n                        Shuffle and Deal.\r\n                    </Button>\r\n                    <>{(this.state.dealt&&!this.state.flop) ? <Button onClick={this.flopCards}>Reveal Flop</Button> : \"\" }</>\r\n                    <>{(this.state.dealt&&this.state.flop&&!this.state.turn) ? <Button onClick={this.turnCards}>Reveal Turn</Button> : \"\" }</>\r\n                    <>{(this.state.dealt&&this.state.turn&&!this.state.river) ? <Button onClick={this.riverCards}>Reveal River</Button> : \"\" }</>\r\n            \r\n\r\n                <Container fluid>\r\n                    <Row>\r\n                        <Col xs=\"2\">\r\n                            <this.leftHand />\r\n                            <Button onClick={this.revealLeft}>Reveal Hand</Button>\r\n                            <p>{this.state.betting&&this.state.chips[0]}</p>\r\n\r\n                            {(!this.state.revealWinner&&this.state.betting) &&  (\r\n                                <> <Button onClick={()=>this.fold(0)}>Fold</Button>\r\n                                    <Button onClick={()=>{\r\n\r\n                                        if(this.state.bets[1]>this.state.bets[0]) {\r\n\r\n                                            this.betHands(0, this.state.bets[1]-this.state.bets[0]);\r\n\r\n                                        } else this.check(\"left\");\r\n\r\n                                    }}>{(this.state.bets[1]>this.state.bets[0]) ? `Call ${this.state.bets[1]-this.state.bets[0]}` : \"Check\"}</Button>\r\n                                    <Button onClick={()=>this.betHands(0,this.doubleOrNothing(0) || 5)}>Bet {this.doubleOrNothing(0) || 5} Chips</Button>\r\n                                </>\r\n\r\n\r\n                            )}\r\n                           \r\n                            \r\n                        </Col>\r\n                        <Col xs=\"8\">\r\n                        <Row>\r\n                            <this.table />\r\n                        </Row>\r\n                        \r\n                        <Row style={{fontSize:15}}>\r\n                            <Col>\r\n                                <p>{(this.state.debug) ? this.state.handAValue : \"\"}</p>\r\n                                <p>{(this.state.debug) ? this.state.handA.toString() + \r\n                                \" (\" + \r\n                                this.state.handA.map(val => \r\n                                thirteen(val+1)).toString() + \")\" : \"\"}</p>\r\n                                <p>{(this.state.river&&this.state.revealWinner) ? `Left ${winsOrLoses(this.state.handAValue,this.state.handBValue)} with ${handName(this.state.handAValue, this.state.handA, this.state.tableCards, true)}!` : \"\"}</p>\r\n                                <p>{(this.state.river&&this.state.revealWinner) ? `Left total wins: ${this.state.leftWins}` : \"\"}</p>\r\n                               \r\n\r\n                            </Col>\r\n                            <Col>\r\n                                <Button onClick={this.revealWinners}>\r\n                                    Reveal Winner\r\n                                </Button>\r\n                                <Button onClick={this.enableBetting}>\r\n                                    {(this.state.betting) ? \"Disable Betting\" : \"Enable Betting\"}\r\n                                </Button>\r\n                                <p>{this.state.bets.reduce((a,b)=>a+b)+this.state.pot}</p>\r\n                                <p>{(this.state.river&&this.state.revealWinner) ? `Total ties: ${this.state.ties}` : \"\"}</p>\r\n                            </Col>\r\n                            <Col>\r\n                                <p>{(this.state.debug) ? this.state.handBValue : \"\"}</p>\r\n                                <p>{(this.state.debug) ? this.state.handB.toString() + \r\n                                \" (\" + this.state.handB.map(val => \r\n                                    thirteen(val+1)).toString() + \")\" \r\n                                    : \"\"}</p>\r\n                                <p>{(this.state.river&&this.state.revealWinner) ? `Right ${winsOrLoses(this.state.handBValue, this.state.handAValue)} with ${handName(this.state.handBValue, this.state.handB, this.state.tableCards, true)}!`: \"\"}</p>\r\n                                <p>{(this.state.river&&this.state.revealWinner) ? `Right total wins: ${this.state.rightWins}` : \"\"}</p>\r\n                            </Col>\r\n                        </Row>\r\n                        </Col>\r\n                        <Col xs=\"2\">\r\n                            <this.rightHand />\r\n                            <Button onClick={this.revealRight}>Reveal Hand</Button>\r\n                            <p>{this.state.betting&&this.state.chips[1]}</p>\r\n                            {(!this.state.revealWinner&&this.state.betting) && (\r\n                                <>\r\n                                <Button onClick={()=>this.fold(1)}>Fold</Button>\r\n                                <Button onClick={()=>{\r\n\r\n                                if(this.state.bets[0]>this.state.bets[1]) {\r\n\r\n                                    this.betHands(1, this.state.bets[0]-this.state.bets[1]);\r\n\r\n                                } else this.check(\"right\");\r\n\r\n\r\n                                }}>{(this.state.bets[0]>this.state.bets[1]) ? `Call ${this.state.bets[0]-this.state.bets[1]}` : \"Check\"}</Button>\r\n                                <Button onClick={()=>this.betHands(1,(this.doubleOrNothing(1) || 5 ))}>Bet {(this.doubleOrNothing(1) || 5 )} Chips</Button>\r\n                            </>\r\n\r\n                            ) }\r\n                            \r\n                        </Col>\r\n                        \r\n                        \r\n                    </Row>\r\n                    </Container>\r\n\r\n                    <p>See an error? Please copy the debug info, and file a report on our <a href=\"https://github.com/PrinceOfShapeir/poker-calculator\">Github page.</a></p>\r\n                    <Button onClick={this.showDebug}>\r\n                        Show debug info\r\n                    </Button>\r\n                    {//note aces will display as (14), this is not a bug, as \"8\" is actually the \"7th\" card\r\n                     //the display values on the right are for convenience and do not factor into any calculations\r\n                    }\r\n                    <>{(this.state.debug) ? <Button onClick={navigator.clipboard.writeText(this.state.handA.toString() + \",\" + this.state.tableCards.toString() + \",\" + this.state.handB.toString())}>Copy Debug Info</Button> : \"\"}</>\r\n                    <>{((!this.state.revealLeft||!this.state.revealRight||!this.state.flop||!this.state.turn||!this.state.river)&&this.state.dealt) ? <Button onClick={this.revealAll}>Reveal All</Button> : \"\"}</>\r\n\r\n                \r\n                \r\n                \r\n                \r\n\r\n\r\n\r\n                </div>\r\n                    \r\n            );\r\n    }\r\n}\r\n","import logo from './logo.svg';\nimport './App.css';\nimport PokerView from './components/PokerView';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nfunction App() {\n  return (\n    \n    <PokerView />\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}